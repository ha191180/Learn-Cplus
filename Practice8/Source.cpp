#include <iostream>
using namespace std;


/*

1,次の項目について〇×で答えよ。
1-1.次のコードの記述は、どのコンピュータでも同様に出力される。
------------------------------------------------------------------------------
#include <iostream>
using namespace std;

int main(){
	int a = 5;
	cout << "変数aのアドレスは" << &a << "です" <<endl;

	return 0;
}
-----------------------------------------------------------------------------

×.変数aを格納するメモリのアドレスは使用環境によって異なる。

1-2.ポインタ宣言をした後、そのポインタに別の文で変数のアドレスを代入することができる。
〇.できる

1-3.参照を初期化せずに、その参照に別の文で変数を代入することができる。
×.できない。参照は初期化が前提条件となるので。初期化せずに用いることはできないし、ゆえに代入も不可能。

*/

//2
/*
//add関数を定義
void add(int* num1, int* num2 ,int num3) {
	*num1 = *num1 + num3;
	*num2 = *num2 + num3;
}
int main() {
	int x1, x2, a;
	int *px1 = &x1, *px2 = &x2;
	cout << "二科目分の点数入力と加算する点数" << endl;
	cin >> x1 >> x2 >> a;
	add(&x1, &x2, a);
	cout << x1 << '\ ' << x2;
	while (true)
	{
	}
}
*/

//関数プロトタイプ宣言
void add(int& x1,int& x2,int a );
//メイン関数
int main() {
	int x1, x2, a;
	cout << "二科目分の点数入力と加算する点数" << endl;
	cin >> x1 >> x2 >> a;
	add(x1,x2,a);//ここではint型を渡しているが、受け取った関数側では、int&として認識され、参照として関数は機能する。
	cout << x1 << '\ ' << x2;  
	while (true)
	{
	}
}

//アド関数の定義
//方の指定を参照にすることで、実数値で渡さず、参照の値として渡すことができる。
void add(int& x1, int& x2, int a)
{
	x1 += a;
	x2 += a;
}